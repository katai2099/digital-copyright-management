// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  walletAddress     String       @id @unique
  username          String       @unique
  firstname         String
  lastname          String
  email             String       @unique
  licenserAgreement agreements[] @relation("licenser")
  licenseeAgreement agreements[] @relation("licensee")
  contents          contents[]
  eventsFrom        events[]     @relation("from")
  eventsTo          events[]     @relation("to")
  requests          requests[]
}

model contents {
  id           Int          @id @unique
  contentType  String
  ownerAddress String
  pHash        String       @unique
  IPFSAddress  String
  title        String
  desc         String
  fieldOfUse   String
  price        String
  publishDate  String
  event        events[]
  owner        users?       @relation(fields: [ownerAddress], references: [walletAddress])
  agreements   agreements[]
  requests     requests[]
}

model events {
  id              Int      @id @unique @default(autoincrement())
  transactionHash String
  contentId       Int
  eventType       String
  from            String
  to              String   @default("")
  price           String   @default("0")
  lastPrice       String   @default("0")
  timestamp       String
  content         contents @relation(fields: [contentId], references: [id])
  From            users    @relation("from", fields: [from], references: [walletAddress])
  To              users    @relation("to", fields: [to], references: [walletAddress])
}

model agreements {
  id              Int      @id @unique
  licensee        String
  licenser        String
  contentId       Int
  purposeOfUse    String
  fieldOfUse      String
  price           String
  transactionHash String
  timestamp       String
  licensers       users?   @relation("licenser", fields: [licenser], references: [walletAddress])
  licensees       users?   @relation("licensee", fields: [licensee], references: [walletAddress])
  content         contents @relation(fields: [contentId], references: [id])
}

model requests {
  id            Int             @id @unique
  licensee      String
  contentId     Int
  purposeOfUse  String
  fieldOfUse    String
  price         String
  requestType   String
  rejectReason  String          @default("")
  timestamp     String
  licensees     users           @relation(fields: [licensee], references: [walletAddress])
  content       contents        @relation(fields: [contentId], references: [id])
  requestEvents requestEvents[]
}

model requestEvents {
  id              Int      @id @unique @default(autoincrement())
  transactionHash String
  requestId       Int
  requestType     String
  timestamp       String
  request         requests @relation(fields: [requestId], references: [id])
}

model transferEvent {
  id              Int    @id @unique @default(autoincrement())
  transactionHash String
  from            String
  to              String
  price           String
  timestamp       String
}
